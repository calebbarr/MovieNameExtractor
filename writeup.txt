The task was pleasantly challenging in at least three aspects: the instances were very small, they were unlabeled, and it is difficult to generalize concerning properties of movie titles themselves, as they may contain proper names, locations, and could conceivably be any part of speech.

Keying in on a phrase, I had planned to build statistical models of sentences containing the phrase, and glean statistically correlated phrases in order to repeat the process and build my arsenal of positive examples.  I had originally planned to calculate the statistical mean of sentences with the key phrase in terms of significant features, which might have initially consisted of the key phrase and those statistically correlated with it, and calculate the distance of each entry to that mean.  This would have had the advantage of providing implicit validation for the approach (the proportion of phrases containing the key phrase that scored an acceptable distance to the mean.)

Toward that end, I implemented a couple approaches to extract statistically significant terms.  I initially ran TF/IDF on instances containing the key phrase, but decided that Chi-Squared analysis was a better fit to the problem, as it measured the likelihood of co-occurrence of each term with the key phrase.  I had expected that terms like "play" or "showing", or "actor" or "starring" would emerge from the mathematics, and from there I could infer patterns around those words.  Even when I added a minimum term count to the Chi-Squared routine, movie titles sparsely co-occurred with the returned terms.

I began to look for movie titles co-occurring with the term "movie."  I noticed that "the movie" was associated much more strongly with movie titles than "movie".  I proceeded from there to build a shallow-parsing solution.  I tried several NLP packages, and decided to use the Illinois Chunker.  I wrapped its functionality in Scala in order to reason about its results using functional programming.

The algorithm that produces the results linked above essentially does a forward, and then backward search within the same chunk as the phrase "the movie".  It then rinses the output through a stop-list.  

This solution can be improved ad-infinitum.  The stop-list could be augmented through additional analysis of the output.  If allowed, actor's names could be gleaned from other lists.  Logic could be implemented to infer movie titles from neighboring chunks.  The returned movie titles and their sentences could be evaluated, and properties of sentences actually containing movie titles could be extracted and generalized to sentences not containing the seed phrase.

Though computational efficiency was not a prime criterion for evaluation, I was cognizant of it throughout, and almost exclusively use immutable, parallelized data structures and side-effect free logic for easy porting to a cluster-computing paradigm.  Additional optimizations are, of course, possible, and could be implemented as required.
